"use strict"; window.location.href !== window.parent.location.href && console.info("modal is running in an iframe"); const profileImage = document.getElementById("profileImage"), profilePictureMessages = document.getElementById("profilePictureMessages"), imgInfo = document.getElementById("img-info"), imgInfoSection = document.getElementById("profile-image-info"), uploadedImagesContainer = document.getElementById("uploaded-images-container"), inputImage = document.getElementById("inputProfilePicture"), formUpdateProfilePicture = document.getElementById("formUpdateProfilePicture"), formUpdateProfilePictureDivs = document.querySelectorAll("form div:not(#profilePictureMessages)"), idNumber = formUpdateProfilePicture.dataset.idnumberKey, fetchURI = formUpdateProfilePicture.dataset.fetchUri; let cropper; const cropperOptions = { aspectRatio: .8, preview: "#img-preview", viewMode: 0, dragMode: "move", rotatable: !1, scalable: !0, zoomable: !0 }; function importImage() { if (imgInfoSection.style.display = "none", uploadedImagesContainer.style.display = "none", !checkCropperAvailable(profileImage)) return inputImage.setAttribute("disabled", !0), void formUpdateProfilePictureDivs.forEach((e => { e.style.display = "none" })); inputImage.addEventListener("change", (function (e) { const t = e.target.files; if (!t || !t.length) return; const r = t[0]; if (!isFileImage(r)) return void displayErrorMessage("Profile Picture Upload Failed", `${r.name} is not an image.`); const o = new FileReader; o.onload = function (e) { profileImage.src = e.target.result, cropper && cropper.destroy(); const t = createImageInfoTable(r); imgInfo.innerHTML = "", imgInfo.appendChild(t), imgInfoSection.style.display = "block", uploadedImagesContainer.style.display = "flex", cropper = new Cropper(profileImage, cropperOptions) }, o.readAsDataURL(r), clearErrorMessage() })) } function returnFileSize(e) { return e < 1e3 ? `${e} bytes` : e >= 1e3 && e < 1e6 ? `${(e / 1e3).toFixed(1)} KB` : `${(e / 1e6).toFixed(1)} MB` } function isFileImage(e) { return e && "image" === e.type.split("/")[0] } function createImageInfoTable(e) { const t = document.createElement("table"), r = document.createElement("thead"), o = document.createElement("tr"); o.appendChild(document.createElement("th")).textContent = "Information", o.appendChild(document.createElement("th")).textContent = "Value", r.appendChild(o), t.appendChild(r); const i = document.createElement("tbody"); return [["File Name", e.name], ["File Type", e.type], ["File Size", returnFileSize(e.size)]].forEach((([e, t]) => { const r = i.insertRow(); r.insertCell(0).innerHTML = e, r.insertCell(1).innerHTML = t })), t.appendChild(i), t } function saveToImage() { return !!checkCropperAvailable(profileImage) && (cropper ? void cropper.getCroppedCanvas({ fillColor: "#fff", imageSmoothingEnabled: !0, imageSmoothingQuality: "high", minWidth: 200, minHeight: 200 }).toBlob((e => { const t = new FormData; t.append("profilePicture", e, "test.png"), t.append("idnumber", idNumber), fetch(fetchURI, { method: "POST", body: t }).then((e => e.json())).then((e => { e.error ? (console.error(e.error), displayErrorMessage("Profile Picture Update Failed", e.error)) : (console.info(e.message), console.info(e.imagePath), displaySuccessMessage("Profile Picture Upload Succeeded", e.message), btnGetImage.setAttribute("disabled", !0), btnGetImage.style.display = "none", btnResetForm.setAttribute("disabled", !0), btnResetForm.style.display = "none", document.getElementsByClassName("img-account-profile")[0].src = e.imagePath) })).catch((e => { console.error("Profile Picture Upload failed", e), displayErrorMessage("Profile Picture Upload Failed", e) })) })) : (displayErrorMessage("Profile Picture Upload Error", "No image selected."), !1)) } function setMessage(e, t, r) { profilePictureMessages.style.display = "block", profilePictureMessages.className = "alert", profilePictureMessages.classList.add(e), profilePictureMessages.innerHTML = `<h4>${t}</h4><hr><p>${r}</p>` } function clearErrorMessage() { profilePictureMessages.style.display = "block", profilePictureMessages.className = "", profilePictureMessages.innerHTML = "" } function displayErrorMessage(e, t) { setMessage("danger", e, t) } function displaySuccessMessage(e, t) { setMessage("success", e, t) } function checkCropperAvailable(e) { try { return console.debug("Check CropperJS Loaded"), new Cropper(e).destroy(), console.debug("CropperJS Loaded Successfully"), !0 } catch (e) { return console.error("CropperJS is not initialized - the script could not be loaded."), displayErrorMessage("Profile Picture Update Error", "The CropperJS Library could not be loaded. This may be due to network errors or something may be blocking the script from loading."), !1 } }